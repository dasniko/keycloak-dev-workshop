---
openapi: 3.0.3
info:
  title: User Storage API
  description: User Storage API for usage from within a Keycloak User Storage SPI to connect to an external user storage.
  version: 1.0.0

externalDocs:
  description: Keycloak User Storage SPI Documentation
  url: https://www.keycloak.org/docs/latest/server_development/index.html#_user-storage-spi

security:
  - basicAuth: []

tags:
  - name: users
    description: Operations about users
  - name: credentials
    description: Operations on credentials

paths:
  /users:
    get:
      summary: List of users
      description: Returns a list of users. If no users could be found, an empty list must be returned.
      operationId: listUsers
      tags:
        - users
      parameters:
        - name: first
          in: query
          description: number of first result to return
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: max
          in: query
          description: number of max results to return
          schema:
            type: integer
            minimum: 1
            default: 20
        - name: username
          in: query
          description: username to search for (exactly)
          schema:
            type: string
            example: fred.flintstone
        - name: email
          in: query
          description: email to search for (exactly)
          schema:
            type: string
            example: fred.flintstone@flintstones.com
        - name: search
          in: query
          description: case insensitive list of strings separated by whitespaces, contained (possibly partly) in username, email, first name or last name
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a user
      operationId: createUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User successfully created
        400:
          description: Invalid id supplied
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/count:
    get:
      summary: Number of users
      operationId: usersCount
      tags:
        - users
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    type: integer
                    minimum: 0
                example:
                  count: 123
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{id}:
    get:
      summary: Find single user by id
      operationId: getUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of user to return
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid id supplied
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of user to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User successfully updated
        400:
          description: Invalid id supplied
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    delete:
      summary: Delete a single user
      operationId: deleteUser
      tags:
        - users
      parameters:
        - name: id
          in: path
          description: id of user to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: User successfully deleted
        400:
          description: Invalid id supplied
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/{id}/credentials:
    put:
      summary: Updates users credential model
      operationId: updateCredentialModel
      tags:
        - credentials
      parameters:
        - name: id
          in: path
          description: id of the user the credentials should be updated for
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialModel'
      responses:
        204:
          description: Credential model update successful
        400:
          description: Credential model update failed
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User entity to update the credential model for not found
  /users/{id}/credentials/verify:
    post:
      summary: Send credential for verification
      operationId: verifyCredentialModel
      tags:
        - credentials
      parameters:
        - name: id
          in: path
          description: id of the user the credentials should be verified for
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialModel'
      responses:
        200:
          description: Credential model verification successful
        400:
          description: Credential model verification not successful
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found

components:
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    User:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: string
          example: 27acf34b-c357-498f-9101-bdcd3fc34580
        username:
          type: string
          example: fred.flintstone
        email:
          type: string
          example: 'fred.flintstone@flintstones.com'
        firstName:
          type: string
          example: Fred
        lastName:
          type: string
          example: Flintstone
        enabled:
          type: boolean
          example: true
        created:
          type: number
          example: 1672531200
        roles:
          type: array
          items:
            type: string
            example: stoneage
    CredentialModel:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          description: credential value, e.g. hashed or cleartext password (base64 encoded), the example value here is "password" un-hashed
          example: cGFzc3dvcmQ
        type:
          type: string
          description: the type of this credential, currently here only "password" is available
          default: password
          example: password
